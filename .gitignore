.DS_Store
Thumbs.db

# Logs
logs 
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# notes from JS
 // let moviesUrl = "http://www.omdbapi.com/?i=" + data.Search[0].imdbID + "&apikey=528cb2fd"
            // return fetch(moviesUrl)
       
    //perform an API call to request and return JSON data specific to title search
    //calling async request returns a promise
    //         .then(async function(response) {
    //             //and then when data is received, return as JSON
    //             var data = await response.json();
    //             console.log(data)
    //                 //assign retrieved data from response to variable and call gettrailer function
    //             trailerID = data.imdbID;
    //             getTrailer();
    //         })

// //assign variable to access play button in the DOM to play trailer
// let playBtn = $("#playBtn");
// //assign variable to provided API Key
// const imdbAPIKey = "k_g52895d2";
// //perform an API call to request data and return in JSON using async/await
// //on line 40 write async in front of function indicating that the code will not run in the order it is written. why? without that preface, the code will run without a received request. When it runs asynchronously, use "await" to ensure the code knows to run AFTER the data gets received.
// async function getTrailer() {
//     console.log("click");
//     let requestUrl = "https://imdb-api.com/en/API/Trailer/k_g52895d2/" + trailerID;
//     var response = await fetch(requestUrl);
//     var data = await response.json();
//     console.log(data)
//     console.log(data.linkEmbed);
//     //target DOM to embed trailer in iframe src
//     document.querySelector(".myTrailer").src = data.linkEmbed;
// }
// //event listener for play button to retrieve trailer data on click
// playBtn.on("click", getTrailer)
